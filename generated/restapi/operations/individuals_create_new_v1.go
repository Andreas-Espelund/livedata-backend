// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IndividualsCreateNewV1HandlerFunc turns a function with the right signature into a individuals create new v1 handler
type IndividualsCreateNewV1HandlerFunc func(IndividualsCreateNewV1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn IndividualsCreateNewV1HandlerFunc) Handle(params IndividualsCreateNewV1Params) middleware.Responder {
	return fn(params)
}

// IndividualsCreateNewV1Handler interface for that can handle valid individuals create new v1 params
type IndividualsCreateNewV1Handler interface {
	Handle(IndividualsCreateNewV1Params) middleware.Responder
}

// NewIndividualsCreateNewV1 creates a new http.Handler for the individuals create new v1 operation
func NewIndividualsCreateNewV1(ctx *middleware.Context, handler IndividualsCreateNewV1Handler) *IndividualsCreateNewV1 {
	return &IndividualsCreateNewV1{Context: ctx, Handler: handler}
}

/*
	IndividualsCreateNewV1 swagger:route POST /v1/individuals individualsCreateNewV1

# Create a new individual

Creates a new individual in the database
*/
type IndividualsCreateNewV1 struct {
	Context *middleware.Context
	Handler IndividualsCreateNewV1Handler
}

func (o *IndividualsCreateNewV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIndividualsCreateNewV1Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
